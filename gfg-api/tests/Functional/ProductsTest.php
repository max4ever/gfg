<?php

namespace Tests\Functional;

use Slim\Http\StatusCode;

class ProductsTest extends BaseTestCase
{

    private $apiPassword;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //get the pwd
        $settings = require __DIR__ . '/../../src/settings.php';
        $this->apiPassword = $settings['settings']['apiPassword'];
    }

    /**
     * Test that the api responds ok
     */
    public function testAllProductsList()
    {
        $response = $this->runApp('GET', '/v1/products?password=' . $this->apiPassword);

        $this->assertEquals(StatusCode::HTTP_OK, $response->getStatusCode());
        $result = (array)json_decode($response->getBody())->result;
        $this->assertEquals(count($result), 100);//default 100 products in db
    }

    /**
     * Test that the api responds ok
     */
    public function testFilterByTitle()
    {
        $response = $this->runApp('GET', '/v1/products?q=.net&password=' . $this->apiPassword);

        $this->assertEquals(StatusCode::HTTP_OK, $response->getStatusCode());
        $result = (array)json_decode($response->getBody())->result;
        $this->assertEquals(count($result), 7);
    }

    /**
     * Test that the api responds ok
     */
    public function testFilterByTitle2()
    {
        $response = $this->runApp('GET', '/v1/products?q=tremblay&password=' . $this->apiPassword);

        $this->assertEquals(StatusCode::HTTP_OK, $response->getStatusCode());
        $sJson = '[{"id":"12","title":"tremblay.com","brand":"dolorem","price":"94953540.00","stock":"4"}]';
        $result = (array)json_decode($response->getBody())->result;

        $this->assertEquals(json_decode($sJson), $result);
    }

    /**
     * Test that the api responds blank
     */
    public function testGetNoResult()
    {
        $response = $this->runApp('GET', '/v1/products?q=----&password=' . $this->apiPassword);

        $this->assertEquals(StatusCode::HTTP_OK, $response->getStatusCode());
        $result = (array)json_decode($response->getBody())->result;
        $this->assertEquals([], $result);
    }

    /**
     * Test that the index route won't accept a post request
     */
    public function testPostMethodNotAllowed()
    {
        $response = $this->runApp('POST', '/v1/products?password=' . $this->apiPassword, ['test']);

        $this->assertEquals(StatusCode::HTTP_METHOD_NOT_ALLOWED, $response->getStatusCode());
        $this->assertContains('Method not allowed', (string)$response->getBody());
    }

    /**
     * Test the error handler works
     */
    public function testErrorEmptyQuery()
    {
        $response = $this->runApp('GET', '/v1/products?q=&password=' . $this->apiPassword);

        $this->assertEquals(StatusCode::HTTP_UNPROCESSABLE_ENTITY, $response->getStatusCode());
        $this->assertEquals(['error_msg' => 'query cannot be empty', 'error_type' => 'InvalidArgumentException'], json_decode($response->getBody(), true));
    }

    public function testAuthentication()
    {
        $response = $this->runApp('GET', '/v1/products');

        $this->assertEquals(StatusCode::HTTP_FORBIDDEN, $response->getStatusCode());
        $this->assertEquals(['error' => 'the password is missing'], json_decode($response->getBody(), true));
    }

    public function testV2Pagination()
    {
        $response = $this->runApp('GET', '/v2/products?q=.com&password=abc&filter[]=brand:d&filter[]=price:5&order=+title,-price&limit=2&start=0');

        $this->assertEquals(StatusCode::HTTP_OK, $response->getStatusCode());
        $result = (array)json_decode($response->getBody())->result;

        $this->assertEquals(count($result), 2);

    }

}